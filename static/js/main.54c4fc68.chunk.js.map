{"version":3,"sources":["config/index.ts","stores/imagesStore.ts","components/ConfirmDialog/styles.ts","components/ConfirmDialog/index.tsx","components/ImageCard/styles.ts","styles/index.ts","components/Preview/styles.ts","components/Preview/index.tsx","components/ImageCard/index.tsx","components/ImageCard/useLogic.ts","components/Toolbar/styles.ts","components/Toolbar/index.tsx","components/Toolbar/useLogic.ts","components/ImageGallery/index.tsx","App.tsx","theme.ts","index.tsx"],"names":["config","server","host","api","getAllImages","uri","errors","references","imagesStore","images","filteredImages","imagesToShow","imagesDisplayStyle","localStorage","getItem","makeAutoObservable","this","imageToDelete","filter","image","id","useConfirmDialogStyles","makeStyles","text","fontSize","ConfirmDialog","title","open","onOk","handleClose","maxWidth","classes","Boolean","onClose","fullWidth","className","onClick","color","usePhotoCardStyles","theme","btn","width","height","deleteBtn","backgroundColor","red","tinycolor","lighten","toString","previewBtn","palette","primary","main","useCommonStyles","cancelButton","minWidth","usePreviewStyles","closeButton","position","top","right","Preview","commonClasses","TransitionComponent","size","classNames","src","url","alt","ImageCard","observer","React","useState","setImageToDelete","imageToShow","setImageToShow","handleDeleteImage","imageId","onConfirmPhotoDelete","deleteImage","handleSelectImage","handleClosePreview","useLogic","getImagesDisplayStyle","item","xs","slice","subheader","albumId","component","thumbnailUrl","container","spacing","alignItems","justifyContent","variant","align","ReactDOM","createPortal","document","body","useToolbarStyles","selectItem","display","selectItemIcon","viewBtn","activeView","border","borderRadius","padding","Toolbar","setPage","sort","setSort","searchValue","setSearchValue","hadleChangeView","e","setImagesDisplayStyle","currentTarget","name","setItem","handleChangeSearchValue","target","value","handleChangeSort","handleClearSort","handleChangeItemsOnPage","setImagesToShow","Number","fuse","Fuse","getImages","keys","threshold","distance","useEffect","searchData","search","setFilteredImages","map","getDefaultImages","orderBy","setImages","marginTop","label","onChange","InputProps","startAdornment","select","String","getImagesToShow","ImageGallery","imagesLoading","page","length","useStyles","toolbar","cardTitle","textOverflow","App","tableTopRef","useRef","setImagesLoading","a","axios","get","data","elevation","ref","count","Math","floor","boundaryCount","event","current","scrollIntoView","behavior","createTheme","typography","fontFamily","dark","contrastText","secondary","error","A400","background","default","overrides","MuiButton","root","textTransform","fontWeight","textPrimary","paddingLeft","paddingRight","outlinedPrimary","borderColor","MuiFilledInput","underline","borderBottomWidth","input","MuiDialog","paper","MuiDialogActions","marginBottom","MuiDialogTitle","borderBottom","marginRight","render","StrictMode","ThemeProvider","getElementById"],"mappings":"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","file":"static/js/main.54c4fc68.chunk.js","sourcesContent":["const config = {\n  server: {\n    host: 'http://jsonplaceholder.typicode.com',\n    api: {\n      getAllImages: {\n        uri: '/photos',\n      },\n    },\n    errors: {},\n  },\n  references: {},\n};\n\nexport default config;\n","import { makeAutoObservable } from 'mobx';\nimport { Image } from '../interfaces/Image';\n\nclass ImagesStore {\n  images: Image[] = [];\n\n  filteredImages: Image[] = [];\n\n  imagesToShow: number = 10;\n\n  imagesDisplayStyle: string = localStorage.getItem('view') || 'grid';\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  get getDefaultImages(): Image[] {\n    return this.images;\n  }\n\n  get getImages(): Image[] {\n    return this.filteredImages;\n  }\n\n  get getImagesToShow(): number {\n    return this.imagesToShow;\n  }\n\n  get getImagesDisplayStyle(): string {\n    return this.imagesDisplayStyle;\n  }\n\n  setImages(images: Image[]) {\n    this.images = images;\n    this.filteredImages = images;\n  }\n\n  setFilteredImages(images: Image[]) {\n    this.filteredImages = images;\n  }\n\n  deleteImage(imageToDelete: Image) {\n    this.filteredImages = this.filteredImages.filter((image) => image.id !== imageToDelete.id);\n  }\n\n  setImagesToShow(imagesToShow: number) {\n    this.imagesToShow = imagesToShow;\n  }\n\n  setImagesDisplayStyle(imagesDisplayStyle: string) {\n    this.imagesDisplayStyle = imagesDisplayStyle;\n  }\n}\n\nconst imagesStore = new ImagesStore();\n\nexport default imagesStore;\n","import { makeStyles } from '@mui/styles';\n\nconst useConfirmDialogStyles = makeStyles(() => ({\n  text: {\n    fontSize: '0.9rem',\n  },\n}));\n\nexport default useConfirmDialogStyles;\n","import React from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n  Button,\n  Breakpoint,\n} from '@mui/material';\n\nimport { Image } from '../../interfaces';\nimport useConfirmDialogStyles from './styles';\n\ninterface ConfirmDialogProps {\n  title: string;\n  text: string;\n  open: Image | number | null;\n  onOk: () => void;\n  handleClose: () => void;\n  maxWidth?: Breakpoint;\n}\n\nconst ConfirmDialog: React.FC<ConfirmDialogProps> = ({\n  title,\n  text,\n  open,\n  onOk,\n  handleClose,\n  maxWidth,\n}): React.ReactElement => {\n  const classes = useConfirmDialogStyles();\n\n  return (\n    <Dialog maxWidth={maxWidth} open={Boolean(open)} onClose={handleClose} fullWidth>\n      <DialogTitle>{title}</DialogTitle>\n      <DialogContent>\n        <DialogContentText className={classes.text}>{text}</DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose} color=\"primary\">\n          Cancel\n        </Button>\n        <Button onClick={onOk} color=\"primary\">\n          Confirm\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default ConfirmDialog;\n","import { Theme } from '@mui/material';\nimport { red } from '@mui/material/colors';\nimport { makeStyles } from '@mui/styles';\nimport tinycolor from 'tinycolor2';\n\nconst usePhotoCardStyles = makeStyles((theme: Theme) => ({\n  btn: {\n    width: 50,\n    height: 50,\n    color: 'white !important',\n  },\n  deleteBtn: {\n    backgroundColor: `${red[500]} !important`,\n\n    '&:hover': {\n      backgroundColor: `${tinycolor(red[400]).lighten(5).toString()} !important`,\n    },\n  },\n  previewBtn: {\n    backgroundColor: `${theme.palette.primary.main} !important`,\n\n    '&:hover': {\n      backgroundColor: `${tinycolor(theme.palette.primary.main).lighten(5).toString()} !important`,\n    },\n  },\n}));\n\nexport default usePhotoCardStyles;\n","import { red } from '@mui/material/colors';\nimport { makeStyles } from '@mui/styles';\n\nconst useCommonStyles = makeStyles(() => ({\n  cancelButton: {\n    minWidth: '30px !important',\n    width: 30,\n    color: `${red[500]} !important`,\n    backgroundColor: `${red[50]} !important`,\n\n    '&:hover': {\n      backgroundColor: `${red[100]} !important`,\n    },\n  },\n}));\n\nexport default useCommonStyles;\n","// @ts-nocheck\nimport { makeStyles } from '@mui/styles';\n\nconst usePreviewStyles = makeStyles(() => ({\n  closeButton: {\n    position: 'absolute !important',\n    top: '3%',\n    right: '3%',\n  },\n}));\n\nexport default usePreviewStyles;\n","import React from 'react';\nimport { Button, Dialog, Fade } from '@mui/material';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport classNames from 'classnames';\n\nimport { Image } from '../../interfaces';\nimport useCommonStyles from '../../styles';\nimport usePreviewStyles from './styles';\n\ninterface PreviewProps {\n  image: Image;\n  open: Image | boolean | null;\n  handleClose: () => void;\n}\n\nconst Preview: React.FC<PreviewProps> = ({ image, open, handleClose }): React.ReactElement => {\n  const commonClasses = useCommonStyles();\n  const classes = usePreviewStyles();\n\n  return (\n    <Dialog open={Boolean(open)} TransitionComponent={Fade} onClose={handleClose}>\n      <Button\n        size=\"small\"\n        className={classNames(commonClasses.cancelButton, classes.closeButton)}\n        onClick={handleClose}\n      >\n        <ClearIcon />\n      </Button>\n      <img src={image.url} alt={image.title} />\n    </Dialog>\n  );\n};\n\nexport default Preview;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Grid, Button, Card, CardMedia, CardActions, CardHeader, Typography } from '@mui/material';\nimport PreviewIcon from '@mui/icons-material/ZoomIn';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport classNames from 'classnames';\n\nimport { observer } from 'mobx-react-lite';\nimport { Image } from '../../interfaces';\nimport { imagesStore } from '../../stores';\nimport usePhotoCardStyles from './styles';\nimport useLogic from './useLogic';\nimport ConfirmDialog from '../ConfirmDialog';\nimport Preview from '../Preview';\n\ninterface ImageCardProps {\n  image: Image;\n}\n\nconst ImageCard: React.FC<ImageCardProps> = observer(({ image }): React.ReactElement => {\n  const classes = usePhotoCardStyles();\n  const {\n    handleDeleteImage,\n    onConfirmPhotoDelete,\n    setImageToDelete,\n    handleSelectImage,\n    handleClosePreview,\n    imageToShow,\n    imageToDelete,\n  } = useLogic();\n\n  return (\n    <>\n      {imagesStore.getImagesDisplayStyle === 'grid' ? (\n        <Grid item xs={4} key={image.id}>\n          <Card>\n            <CardHeader title={image.title.slice(0, 20)} subheader={`Album ID: ${image.albumId}`} />\n            <CardMedia component=\"img\" height=\"100%\" image={image.thumbnailUrl} alt={image.title} />\n            <CardActions>\n              <Button\n                size=\"small\"\n                className={classNames(classes.btn, classes.deleteBtn)}\n                onClick={() => handleDeleteImage(image)}\n              >\n                <DeleteIcon />\n              </Button>\n              <Button\n                size=\"small\"\n                className={classNames(classes.btn, classes.previewBtn)}\n                onClick={() => handleSelectImage(image)}\n              >\n                <PreviewIcon />\n              </Button>\n            </CardActions>\n          </Card>\n        </Grid>\n      ) : (\n        <Grid\n          container\n          item\n          spacing={5}\n          xs={12}\n          key={image.id}\n          alignItems=\"center\"\n          justifyContent=\"space-between\"\n        >\n          <Grid item xs={4}>\n            <img src={image.thumbnailUrl} alt={image.title} height=\"50%\" width=\"100%\" />\n          </Grid>\n          <Grid item xs={3}>\n            <Typography variant=\"h5\" align=\"center\">\n              {image.title.slice(0, 20)}\n            </Typography>\n          </Grid>\n          <Grid item xs={3}>\n            <Typography variant=\"body1\" align=\"center\">{`Album ID: ${image.albumId}`}</Typography>\n          </Grid>\n          <Grid container item spacing={2} xs={2}>\n            <Grid item>\n              <Button\n                size=\"small\"\n                className={classNames(classes.btn, classes.deleteBtn)}\n                onClick={() => handleDeleteImage(image)}\n              >\n                <DeleteIcon />\n              </Button>\n            </Grid>\n            <Grid item>\n              <Button\n                size=\"small\"\n                className={classNames(classes.btn, classes.previewBtn)}\n                onClick={() => handleSelectImage(image)}\n              >\n                <PreviewIcon />\n              </Button>\n            </Grid>\n          </Grid>\n        </Grid>\n      )}\n      {imageToDelete?.id === image.id &&\n        ReactDOM.createPortal(\n          <ConfirmDialog\n            title=\"Confirm photo deletion\"\n            text=\"Are you sure that you want to delete this photo? This action is permanent!\"\n            open={imageToDelete}\n            onOk={onConfirmPhotoDelete}\n            handleClose={() => setImageToDelete(null)}\n            maxWidth=\"sm\"\n          />,\n          document.body\n        )}\n      {imageToShow?.id === image.id &&\n        ReactDOM.createPortal(\n          <Preview image={imageToShow} open={imageToShow} handleClose={handleClosePreview} />,\n          document.body\n        )}\n    </>\n  );\n});\n\nexport default ImageCard;\n","import React from 'react';\n\nimport { Image } from '../../interfaces';\nimport { imagesStore } from '../../stores';\n\nexport default function useLogic() {\n  const [imageToDelete, setImageToDelete] = React.useState<Image | null>(null);\n  const [imageToShow, setImageToShow] = React.useState<Image | null>(null);\n\n  const handleDeleteImage = (imageId: Image) => {\n    setImageToDelete(imageId);\n  };\n\n  const onConfirmPhotoDelete = () => {\n    if (imageToDelete) {\n      imagesStore.deleteImage(imageToDelete);\n      setImageToDelete(null);\n    }\n  };\n\n  const handleSelectImage = (image: Image) => {\n    setImageToShow(image);\n  };\n\n  const handleClosePreview = () => {\n    setImageToShow(null);\n  };\n\n  return {\n    handleDeleteImage,\n    onConfirmPhotoDelete,\n    setImageToDelete,\n    handleSelectImage,\n    handleClosePreview,\n    imageToShow,\n    imageToDelete,\n  };\n}\n","import { Theme } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\nimport tinycolor from 'tinycolor2';\n\nconst useToolbarStyles = makeStyles((theme: Theme) => ({\n  selectItem: {\n    display: 'flex !important',\n    alignItems: 'center',\n  },\n  selectItemIcon: {\n    fontSize: 18,\n  },\n  viewBtn: {\n    width: 50,\n    height: 50,\n  },\n  activeView: {\n    backgroundColor: `${tinycolor(theme.palette.primary.main).lighten(10).toString()} !important`,\n    border: 0,\n    borderRadius: 3,\n    color: 'white !important',\n    padding: '0 30px',\n  },\n}));\n\nexport default useToolbarStyles;\n","import React from 'react';\nimport {\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  Grid,\n  TextField,\n  IconButton,\n  Button,\n} from '@mui/material';\nimport GridViewIcon from '@mui/icons-material/GridView';\nimport TableRowsIcon from '@mui/icons-material/TableRows';\nimport SearchIcon from '@mui/icons-material/Search';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';\nimport ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';\nimport classNames from 'classnames';\nimport { observer } from 'mobx-react-lite';\nimport Fuse from 'fuse.js';\nimport { orderBy } from 'lodash';\n\nimport useToolbarStyles from './styles';\nimport useCommonStyles from '../../styles';\nimport useLogic from './useLogic';\nimport { imagesStore } from '../../stores';\n\nexport interface ToolbarProps {\n  setPage: (page: number) => void;\n}\n\nconst Toolbar: React.FC<ToolbarProps> = observer(({ setPage }): React.ReactElement => {\n  const commonClasses = useCommonStyles();\n  const classes = useToolbarStyles();\n  const {\n    hadleChangeView,\n    handleChangeItemsOnPage,\n    handleChangeSearchValue,\n    handleChangeSort,\n    handleClearSort,\n    searchValue,\n    sort,\n  } = useLogic({ setPage });\n  const fuse = new Fuse(imagesStore.getImages, {\n    keys: ['title'],\n    threshold: 0.2,\n    distance: 30,\n  });\n\n  React.useEffect(() => {\n    if (searchValue) {\n      const searchData = fuse.search(searchValue);\n\n      imagesStore.setFilteredImages(searchData.map(({ item }) => item));\n    } else {\n      imagesStore.setFilteredImages(imagesStore.getDefaultImages);\n    }\n\n    /* eslint-disable-next-line */\n  }, [searchValue]);\n\n  React.useEffect(() => {\n    if (sort) {\n      imagesStore.setFilteredImages(\n        orderBy(imagesStore.getImages, ['albumId'], sort === 'asc' ? 'asc' : 'desc')\n      );\n    } else {\n      imagesStore.setImages(imagesStore.getDefaultImages);\n    }\n\n    setPage(1);\n\n    /* eslint-disable-next-line */\n  }, [sort]);\n\n  return (\n    <Grid\n      container\n      item\n      spacing={5}\n      xs={12}\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n      marginTop={0}\n    >\n      <Grid item xs={4}>\n        <TextField\n          label=\"Search\"\n          variant=\"outlined\"\n          value={searchValue}\n          onChange={handleChangeSearchValue}\n          InputProps={{ startAdornment: <SearchIcon /> }}\n          fullWidth\n        />\n      </Grid>\n      <Grid container item spacing={2} xs={3} alignItems=\"center\">\n        <Grid item xs={sort ? 11 : 12}>\n          <FormControl fullWidth>\n            <InputLabel>Sort</InputLabel>\n            <Select\n              value={sort}\n              label=\"Sort\"\n              onChange={handleChangeSort}\n              classes={{\n                select: classes.selectItem,\n              }}\n            >\n              <MenuItem value=\"asc\">\n                Album Number <ArrowUpwardIcon className={classes.selectItemIcon} />\n              </MenuItem>\n              <MenuItem value=\"desc\">\n                Album Number <ArrowDownwardIcon className={classes.selectItemIcon} />\n              </MenuItem>\n            </Select>\n          </FormControl>\n        </Grid>\n        {sort && (\n          <Grid item xs={1}>\n            <Button size=\"small\" className={commonClasses.cancelButton} onClick={handleClearSort}>\n              <ClearIcon />\n            </Button>\n          </Grid>\n        )}\n      </Grid>\n      <Grid item xs={3}>\n        <FormControl fullWidth>\n          <InputLabel>Items on page</InputLabel>\n          <Select\n            value={String(imagesStore.getImagesToShow)}\n            label=\"Items on page\"\n            onChange={handleChangeItemsOnPage}\n          >\n            <MenuItem value={10}>Ten</MenuItem>\n            <MenuItem value={20}>Twenty</MenuItem>\n            <MenuItem value={30}>Thirty</MenuItem>\n          </Select>\n        </FormControl>\n      </Grid>\n      <Grid item>\n        <IconButton\n          name=\"grid\"\n          color=\"primary\"\n          className={classNames(classes.viewBtn, {\n            [classes.activeView]: imagesStore.getImagesDisplayStyle === 'grid',\n          })}\n          onClick={hadleChangeView}\n        >\n          <GridViewIcon />\n        </IconButton>\n      </Grid>\n      <Grid item>\n        <IconButton\n          name=\"table\"\n          color=\"primary\"\n          className={classNames(classes.viewBtn, {\n            [classes.activeView]: imagesStore.getImagesDisplayStyle === 'table',\n          })}\n          onClick={hadleChangeView}\n        >\n          <TableRowsIcon />\n        </IconButton>\n      </Grid>\n    </Grid>\n  );\n});\n\nexport default Toolbar;\n","import React from 'react';\nimport { SelectChangeEvent } from '@mui/material';\n\nimport { ToolbarProps } from './index';\nimport { imagesStore } from '../../stores';\n\nexport default function useLogic({ setPage }: ToolbarProps) {\n  const [sort, setSort] = React.useState('');\n  const [searchValue, setSearchValue] = React.useState('');\n\n  const hadleChangeView = (e: React.MouseEvent<HTMLButtonElement>) => {\n    imagesStore.setImagesDisplayStyle(e.currentTarget.name);\n\n    localStorage.setItem('view', e.currentTarget.name);\n  };\n\n  const handleChangeSearchValue = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (sort) {\n      setSort('');\n    }\n\n    setSearchValue(e.target.value);\n  };\n\n  const handleChangeSort = (e: SelectChangeEvent) => {\n    const sort = e.target.value;\n\n    setSort(sort);\n  };\n\n  const handleClearSort = () => {\n    setSort('');\n  };\n\n  const handleChangeItemsOnPage = (e: SelectChangeEvent) => {\n    imagesStore.setImagesToShow(Number(e.target.value));\n    setPage(1);\n  };\n\n  return {\n    sort,\n    searchValue,\n    hadleChangeView,\n    handleChangeSearchValue,\n    handleChangeSort,\n    handleClearSort,\n    handleChangeItemsOnPage,\n  };\n}\n","import React from 'react';\nimport { Grid, CircularProgress, Typography } from '@mui/material';\nimport { observer } from 'mobx-react-lite';\n\nimport PhotoCard from '../ImageCard';\nimport { Image } from '../../interfaces';\nimport { imagesStore } from '../../stores';\n\ninterface ImageGalleryProps {\n  imagesLoading: boolean;\n  page: number;\n}\n\nconst ImageGallery: React.FC<ImageGalleryProps> = observer(({ imagesLoading, page }) => (\n  <Grid container item spacing={5} xs={12} justifyContent=\"center\">\n    {imagesLoading && (\n      <Grid item>\n        <CircularProgress />\n      </Grid>\n    )}\n    {!imagesLoading &&\n      (imagesStore.getImages.length ? (\n        <Grid container item spacing={5} xs={12}>\n          {imagesStore.getImages\n            .slice(imagesStore.getImagesToShow * (page - 1), page * imagesStore.getImagesToShow)\n            .map((image: Image) => (\n              <PhotoCard image={image} />\n            ))}\n        </Grid>\n      ) : (\n        <Grid item>\n          <Typography variant=\"body1\">No images were found</Typography>\n        </Grid>\n      ))}\n  </Grid>\n));\nexport default ImageGallery;\n","import React from 'react';\nimport { Theme, Typography, Container, Grid, Paper, Pagination } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\nimport axios from 'axios';\n\nimport { observer } from 'mobx-react-lite';\nimport config from './config';\nimport { imagesStore } from './stores';\nimport { Image } from './interfaces';\nimport { ImageGallery, Toolbar } from './components';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  toolbar: {\n    padding: theme.spacing(5),\n    marginTop: theme.spacing(5),\n  },\n  cardTitle: {\n    textOverflow: 'ellipsis',\n  },\n}));\n\nconst App: React.FC = observer((): React.ReactElement => {\n  const classes = useStyles();\n  const tableTopRef = React.useRef<HTMLDivElement>(null);\n  const [imagesLoading, setImagesLoading] = React.useState(false);\n  const [page, setPage] = React.useState(1);\n\n  const handleChangePage = (event: React.ChangeEvent<any>, page: number) => {\n    setPage(page);\n\n    if (tableTopRef.current) {\n      tableTopRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  React.useEffect(() => {\n    (async () => {\n      try {\n        setImagesLoading(true);\n\n        const { data } = await axios.get<Image[]>(\n          `${config.server.host}${config.server.api.getAllImages.uri}`\n        );\n\n        imagesStore.setImages(data);\n      } finally {\n        setImagesLoading(false);\n      }\n    })();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Typography variant=\"h3\" align=\"center\">\n          Image Viewer App\n        </Typography>\n        <Paper elevation={5} className={classes.toolbar} ref={tableTopRef}>\n          <Grid container spacing={5}>\n            <Toolbar setPage={setPage} />\n            <ImageGallery page={page} imagesLoading={imagesLoading} />\n            {!imagesLoading && !!imagesStore.getImages.length && (\n              <Grid container item xs={12} justifyContent=\"flex-end\">\n                <Grid item>\n                  <Pagination\n                    count={Math.floor(imagesStore.getImages.length / imagesStore.imagesToShow)}\n                    boundaryCount={2}\n                    page={page}\n                    onChange={handleChangePage}\n                    color=\"primary\"\n                  />\n                </Grid>\n              </Grid>\n            )}\n          </Grid>\n        </Paper>\n      </Container>\n    </div>\n  );\n});\n\nexport default App;\n","// @ts-nocheck\nimport { createTheme } from '@mui/material/styles';\nimport { red } from '@mui/material/colors';\n\nexport const theme = createTheme({\n  spacing: 4,\n  typography: {\n    fontFamily: [\n      'system-ui',\n      '-apple-system',\n      'BlinkMacSystemFont',\n      'Segoe UI',\n      'Roboto',\n      'Ubuntu',\n      'Helvetica Neue',\n      'sans-serif',\n    ],\n  },\n  palette: {\n    primary: {\n      main: 'rgb(29, 161, 242)',\n      dark: 'rgb(26, 145, 218)',\n      contrastText: '#fff',\n    },\n    secondary: {\n      main: 'rgb(26, 145, 218)',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#fff',\n    },\n    text: {\n      primary: '#14171a',\n    },\n  },\n  overrides: {\n    MuiButton: {\n      root: {\n        borderRadius: 30,\n        textTransform: 'none',\n        fontSize: 16,\n        height: 40,\n        fontWeight: 700,\n      },\n      textPrimary: {\n        paddingLeft: 20,\n        paddingRight: 20,\n      },\n      outlinedPrimary: {\n        borderColor: 'rgb(29, 161, 243)',\n      },\n    },\n    MuiFilledInput: {\n      underline: {\n        '&:after': {\n          borderBottomWidth: '2px',\n        },\n        '&:before': {\n          borderColor: '#000',\n          borderBottomWidth: '2px',\n        },\n      },\n      input: {\n        backgroundColor: 'rgb(245, 248, 250)',\n      },\n    },\n    MuiDialog: {\n      paper: {\n        borderRadius: 15,\n      },\n    },\n    MuiDialogActions: {\n      root: {\n        marginBottom: 8,\n      },\n    },\n    MuiDialogTitle: {\n      root: {\n        borderBottom: '1px solid rgb(204, 214, 221)',\n        marginBottom: 10,\n        padding: '10px 15px',\n        '& h2': {\n          display: 'flex',\n          alignItems: 'center',\n          fontWeight: 800,\n        },\n        '& button': {\n          padding: 8,\n          marginRight: 20,\n        },\n      },\n    },\n  },\n});\n\nexport default theme;\n","import { CssBaseline } from '@mui/material';\nimport { ThemeProvider } from '@mui/material/styles';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nimport theme from './theme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}